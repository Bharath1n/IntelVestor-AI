name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('intelvestor-backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Spring Boot
        run: |
          cd intelvestor-backend
          chmod +x mvnw
          ./mvnw -B package --file pom.xml
          cp target/intelvestor-backend-0.0.1-SNAPSHOT.jar .

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('intelvestor-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean up Docker environment
        run: |
          docker-compose down -v --remove-orphans || true
          docker system prune -f --volumes || true

      - name: Build ML image
        run: docker build -t intelvestor-ml ./intelvestor-ml

      - name: Build Backend image
        run: docker build -t intelvestor-backend ./intelvestor-backend

      - name: Build Frontend
        run: |
          cd intelvestor-frontend
          npm ci
          npm run build
          cd ..

      - name: Build Frontend image
        run: docker build -t intelvestor-frontend ./intelvestor-frontend

      - name: Run tests
        run: |
          cd intelvestor-backend && ./mvnw test || echo "No backend tests"
          cd ../intelvestor-frontend && npm test || echo "No frontend tests"

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Validate Docker Compose file
        run: docker-compose -f docker-compose.yml config

      - name: Test Docker Compose
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "NEWS_API_KEY=$NEWS_API_KEY" > intelvestor-ml/.env
          echo "GOOGLE_API_KEY=$GOOGLE_API_KEY" >> intelvestor-ml/.env
          echo "VITE_CLERK_PUBLISHABLE_KEY=pk_test_bmF0aXZlLWRydW0tOTcuY2xlcmsuYWNjb3VudHMuZGV2JA" > intelvestor-frontend/.env
          echo "VITE_BACKEND_URL=http://backend:8080" >> intelvestor-frontend/.env
          docker-compose -f docker-compose.yml up -d || { docker-compose logs; exit 1; }
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "Backend failed to start in time"
            docker-compose logs
            exit 1
          fi
          curl -f http://localhost:8000/health || { echo "ML service health check failed"; docker-compose logs; exit 1; }
          curl -f http://localhost:3000 || { echo "Frontend health check failed"; docker-compose logs; exit 1; }
          docker-compose down -v

    env:
      DOCKER_BUILDKIT: 1